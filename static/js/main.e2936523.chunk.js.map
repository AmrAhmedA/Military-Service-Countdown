{"version":3,"sources":["Components/Countdown.jsx","Components/SocialMediaIcons.jsx","App.js","reportWebVitals.js","index.js"],"names":["hourSeconds","daySeconds","timerProps","isPlaying","strokeWidth","size","trailColor","renderTime","dimension","time","className","style","color","Countdown","stratTime","Date","now","remainingTime","parse","daysDuration","Math","ceil","useEffect","RD","floor","document","title","Grid","container","spacing","justify","alignItems","item","md","sm","xs","colors","duration","initialRemainingTime","elapsedTime","onComplete","totalElapsedTime","SocialMediaIcons","url","fgColor","App","Fragment","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e2936523.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\r\nimport { Grid } from \"@material-ui/core\";\r\n\r\nconst minuteSeconds = 60;\r\nconst hourSeconds = 3600;\r\nconst daySeconds = 86400;\r\n\r\nconst timerProps = {\r\n  isPlaying: true,\r\n  strokeWidth: 6,\r\n  size: 120,\r\n  trailColor: \"#FFFFFF\",\r\n};\r\n\r\nconst renderTime = (dimension, time) => {\r\n  return (\r\n    <div>\r\n      <div className=\"time\">{time}</div>\r\n      <div style={{ color: \"white\" }}>{dimension}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst getTimeSeconds = (time) => (minuteSeconds - time) | 0;\r\nconst getTimeMinutes = (time) => ((time % hourSeconds) / minuteSeconds) | 0;\r\nconst getTimeHours = (time) => ((time % daySeconds) / hourSeconds) | 0;\r\nconst getTimeDays = (time) => (time / daySeconds) | 0;\r\n\r\nexport default function Countdown() {\r\n  const stratTime = Date.now() / 1000;\r\n  const endTime = Date.parse(\"March, 01, 2022, 00:00 am\") / 1000;\r\n\r\n  const remainingTime = endTime - stratTime;\r\n  const days = Math.ceil(remainingTime / daySeconds);\r\n  const daysDuration = days * daySeconds;\r\n\r\n  useEffect(() => {\r\n    const RD = Math.floor(remainingTime / 86400);\r\n    document.title = RD + \" days left\";\r\n  });\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n        <div className=\"space\">\r\n          <Grid item md={3} sm={3} xs={12}>\r\n            <CountdownCircleTimer\r\n              {...timerProps}\r\n              colors={[[\"#000000\"]]}\r\n              duration={daysDuration}\r\n              initialRemainingTime={remainingTime}\r\n            >\r\n              {({ elapsedTime }) =>\r\n                renderTime(\"days\", getTimeDays(daysDuration - elapsedTime))\r\n              }\r\n            </CountdownCircleTimer>\r\n          </Grid>\r\n        </div>\r\n\r\n        <div className=\"space\">\r\n          <Grid item md={3} sm={3} xs={12}>\r\n            <CountdownCircleTimer\r\n              {...timerProps}\r\n              colors={[[\"#000000\"]]}\r\n              duration={daySeconds}\r\n              initialRemainingTime={remainingTime % daySeconds}\r\n              onComplete={(totalElapsedTime) => [\r\n                remainingTime - totalElapsedTime > hourSeconds,\r\n              ]}\r\n            >\r\n              {({ elapsedTime }) =>\r\n                renderTime(\"hours\", getTimeHours(daySeconds - elapsedTime))\r\n              }\r\n            </CountdownCircleTimer>\r\n          </Grid>\r\n        </div>\r\n\r\n        <div className=\"space\">\r\n          <Grid item md={3} sm={3} xs={12}>\r\n            <CountdownCircleTimer\r\n              {...timerProps}\r\n              colors={[[\"#000000\"]]}\r\n              duration={hourSeconds}\r\n              initialRemainingTime={remainingTime % hourSeconds}\r\n              onComplete={(totalElapsedTime) => [\r\n                remainingTime - totalElapsedTime > minuteSeconds,\r\n              ]}\r\n            >\r\n              {({ elapsedTime }) =>\r\n                renderTime(\"minutes\", getTimeMinutes(hourSeconds - elapsedTime))\r\n              }\r\n            </CountdownCircleTimer>\r\n          </Grid>\r\n        </div>\r\n\r\n        <div className=\"space\">\r\n          <Grid item md={3} sm={3} xs={12}>\r\n            <CountdownCircleTimer\r\n              {...timerProps}\r\n              colors={[[\"#000000\"]]}\r\n              duration={minuteSeconds}\r\n              initialRemainingTime={remainingTime % minuteSeconds}\r\n              onComplete={(totalElapsedTime) => [\r\n                remainingTime - totalElapsedTime > 0,\r\n              ]}\r\n            >\r\n              {({ elapsedTime }) =>\r\n                renderTime(\"seconds\", getTimeSeconds(elapsedTime))\r\n              }\r\n            </CountdownCircleTimer>\r\n          </Grid>\r\n        </div>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { SocialIcon } from \"react-social-icons\";\r\n\r\nexport default function SocialMediaIcons() {\r\n  return (\r\n    <div className=\"socialDiv\">\r\n      <SocialIcon\r\n        className=\"socialIcons\"\r\n        url=\"https://github.com/MohamedWSalah\"\r\n        fgColor=\"white\"\r\n      />\r\n      <SocialIcon\r\n        className=\"socialIcons\"\r\n        url=\"https://www.linkedin.com/in/mohamedsalah47/\"\r\n        fgColor=\"white\"\r\n      />\r\n\r\n      <SocialIcon\r\n        className=\"socialIcons\"\r\n        url=\"https://www.facebook.com/6Moon9\"\r\n        fgColor=\"white\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Countdown from \"./Components/Countdown\";\nimport SocialMediaIcons from \"./Components/SocialMediaIcons\";\nfunction App() {\n  return (\n    <React.Fragment>\n      <SocialMediaIcons />\n\n      <Countdown />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}